<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<?component error="true" debug="true"?>

<package>


<component id="inner_vbs_proxy">
<registration
	description="WSC proxying methods and codes of VBScript under JScript"
	progid="SLV.VBS.Proxy"
	version="1"
	classid="{08337B23-A0B1-46D2-A93F-27F2FF3BD856}">
</registration>


<public>
<comment>
/*
	Copyright © 2016 — 2016 Svyatoslav Skriplyonok. All rights reserved.
	Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE, Version 3
	License: https://github.com/simvesel/wsh-lib/blob/master/LICENSE
*/

	@file:   "slv_js_import.wsc"
	@begin:  16:19 06.01.2016
	@author: Svyatoslav Skriplyonok (Simvesel/Simron)
</comment>


	<method name="inner_hidden_prompt" internalName="prompt">
		<parameter name="PromptText"/>
		<parameter name="Title"/>
		<parameter name="DefaultValue"/>
		<parameter name="XPos"/>
		<parameter name="YPos"/>
		<parameter name="Helpfile"/>
		<parameter name="Context"/>
	</method>


	<method name="prompt_old">
		<parameter name="PromptText"/>
		<parameter name="Title"/>
		<parameter name="DefaultValue"/>
		<parameter name="XPos"/>
		<parameter name="YPos"/>
		<parameter name="Helpfile"/>
		<parameter name="Context"/>
	</method>
</public>

<script language="VBScript"><![CDATA[

	Function qq(s) : qq = """" & s & """" : End Function

	Function isGoodStr(x)
		isGoodStr = False
		If vbString = VarType(x) Then
			 If 0 < Len(x) Then
					isGoodStr = True
			 End If
		End If
	End Function

	Function DBG_get_rtti( x )
		'CHECK: Nothing, Unknown, Error
		Dim masTpNm: masTpNm = TypeName( x )
		Dim masVal

		Select Case VarType( x )
			Case vbEmpty
				masVal = "<Empty>"
			Case vbNull
				masVal = "<Null>"
			Case vbObject
				masVal = "<" & TypeName( x ) & " object>"

			Case vbError
				masVal = "<Error>"
			Case vbVariant
				masVal = "<" & TypeName( x ) & " Variant>"
			Case vbDataObject
				masVal = "<" & TypeName( x ) & " DataObject>"
			Case vbArray
				masVal = "<" & TypeName( x ) & " Array>"

			Case vbString
				masVal = qq( x )
			Case Else
				masVal = CStr( x )
		End Select
		Dim masBool: masBool = CStr( isGoodStr( x ) )
		DBG_get_rtti = vbCrLf & "TpNm: " & masTpNm & vbCrLf & "Val: " & masVal & vbCrLf & "GdStr: " & masBool & vbCrLf
	End Function



	' (ByRef Company As String, Optional ByVal Office As String = "QJZ")
	' Function prompt( PromptText, Title, DefaultValue, XPos, YPos, Helpfile, Context )
	Function prompt_old( ByRef PromptText,_
			ByRef Title,_
			ByRef DefaultValue,_
			ByRef XPos,_
			ByRef YPos,_
			ByRef Helpfile,_
			ByRef Context _
	)
		Dim mRes
		mRes = InputBox( PromptText, Title, DefaultValue, XPos, YPos, Helpfile, Context )
		If DefaultValue <> "" And mRes = ""  Then
			Set mRes = Nothing
		End If
		prompt_old = mRes
	End Function



	Function fn_return_vbError( p1, p2 )
		fn_return_vbError = p1
	End Function


	Function prompt( ByVal PromptText,_
			ByVal Title,_
			ByVal DefaultValue,_
			ByVal XPos,_
			ByVal YPos,_
			ByVal Helpfile,_
			ByVal Context _
	)
		If IsEmpty( XPos ) Then
			Dim masInfo: masInfo = DBG_get_rtti( XPos )
			MsgBox masInfo, , "== XPos =="

			masInfo = DBG_get_rtti( fn_return_vbError( , 1 ) )
			MsgBox masInfo, , "== return func =="

			XPos = fn_return_vbError( , 1 )
			masInfo = DBG_get_rtti( XPos )
			MsgBox masInfo, , "== in var =="

			'YPos = fn_return_vbError( , 1 )
		End If


		Dim mRes
		'InputBox( "test--2000" )
		mRes = InputBox( PromptText, Title, DefaultValue, XPos, YPos, Helpfile, Context )
		' If DefaultValue <> "" And mRes = ""  Then
		'	Set mRes = Nothing
		' End If
		prompt = mRes
	End Function
]]></script>

</component>





<component id="inner_slv_import">
<registration
	description="WSC for simplifying import JScript Library/Source code"
	progid="SLV.JS.Import"
	version="1"
	classid="{5183B7A6-9D7D-4ED7-8CF7-48E832C8DAD1}">
</registration>


<public>
<comment>
/*
	Copyright © 2014 — 2015 Svyatoslav Skriplyonok. All rights reserved.
	Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE, Version 3
	License: https://github.com/simvesel/wsh-lib/blob/master/LICENSE
*/


	@file:   "slv_js_import.wsc"
	@begin:  19:02 30.03.2014
	@author: Svyatoslav Skriplyonok (Simvesel/Simron)
</comment>



	<method name="fn_import">
		<parameter name="ArrayOfAliasesToLibraryForImport"/>
	</method>

	<property name="xasOwnPath" internalName="g_asOwnPath"/>
	<property name="xasLibDirPath" internalName="g_asLibDirPath"/>
</public>



<resource id="rsrc_code_main"><![CDATA[
"use strict";

var g_cApp = {};
g_cApp.xasLibDirPath = "${VAR_LIBDIRPATH}";

function general_inc( jsFile )
{
	var f, masData;
	f = g_fso.OpenTextFile( jsFile );
	masData = f.ReadAll();
	f.Close();

	return masData;
}

function g_inc( jsFile )
{
	return general_inc( g_cApp.xasLibDirPath + jsFile );
}

function fn_get_app_instance()
{
	return g_cApp;
}

]]>
</resource>


<resource id="rsrc_code_for_r_inc"><![CDATA[
var g_ws = WScript,
		g_fso = new ActiveXObject( "Scripting.FileSystemObject" ),
		g_sh = new ActiveXObject( "WScript.Shell" );

g_cApp.xasAppName = g_fso.GetBaseName( g_ws.ScriptName );
g_cApp.xasInstallDirPath = g_fso.GetParentFolderName( g_ws.ScriptFullName ) + "/";

function r_inc( jsFile )
{
	return general_inc( g_cApp.xasInstallDirPath + jsFile );
}

]]>
</resource>




<object id="g_sh" progid="WScript.Shell"/>
<object id="g_fso" progid="Scripting.FileSystemObject"/>

<script language="JScript"><![CDATA[
"use strict";

// HKLM\\SOFTWARE\\Classes\\CLSID\\
var g_asOwnPath = g_sh.RegRead( "HKCR\\CLSID\\{5183B7A6-9D7D-4ED7-8CF7-48E832C8DAD1}\\ScriptletURL\\" );
if( g_asOwnPath === "" )
{
	throw new Error( "REG: read empty path value!" );
}
g_asOwnPath = g_asOwnPath.replace( "file:///", "" );
g_asLibDirPath = g_fso.GetParentFolderName( g_asOwnPath ) + "/";


function getMainSource()
{
	var masCode = getResource( "rsrc_code_main" );

	return masCode.replace( "${VAR_LIBDIRPATH}", g_asLibDirPath );
}


function getR_incSource()
{
	return getResource( "rsrc_code_for_r_inc" );
}


eval( getMainSource() );


//=============================================================
/*
Массив алиасов, которые нужно заинклудить (сложных алиасов не должно быть!!!)
Последний элемент удалять из массива и передавать в рекурсивную функцию уменьшенный массив.
Последний элемент-имя файла добавлять в массив подключений с первоначальным алиасом.
*/
var g_vLibsAliases =
{
/*
  Последний элемент в поле-массиве -- имя файла, а все остальные элементы --
  имена модулей, от которых зависит текущий раскручиваемый модуль.

	@@@ Пример:
	"store-cfg": [ "utils", "reg-cfg", "ini-cfg", "json-cfg", "lib/store-cfg.js" ],
*/


//=============================================================
// Сторонние библиотеки
	"json": "3rd_party_libs/json.js",

//-------------------------------------------------------------
	"json-cfg": [ "json", "lib/json-cfg.js" ],


//=============================================================
// Мои библиотеки
	"utils": "lib/sys_utils.js",

//-------------------------------------------------------------
	"exec": [ "utils", "lib/exec_args_escape.js" ],
	"exec_wsh": [ "utils", "lib/wsh_args_escape.js" ],


//-------------------------------------------------------------
	"dummy": "alias"
}


//=============================================================
// Индекс с ранее обработанными алиасами модулей при раскрутке зависимостей
var g_cIndexProcessedLibsAlias = {};
var g_bFisrtCallImport = true;

// Массив используется для хранения раскрученных зависимостей модулей
// для текущего вызова функции импорта "fn_import".
var g_vLibImportStructure;
var g_vLibImportDeep; //< Текущая глубина рекурсии при раскрутке зависимостей


//=============================================================
/* Create a new object, that prototypally inherits from the Error constructor.
function ImportError( message )
{
  this.name = "ImportError";
  this.message = message || "Default message...";
}
//ImportError.prototype = Error.prototype;
ImportError.prototype = new Error();
ImportError.prototype.constructor = ImportError;
*/

/*
короткосложный_импорт => длиннопростой_импорт
*/
function deploy_complex_alias( mvAliases )
{
	if( mvAliases === null )
	{
		throw new Error( "Null is not array!" );
	}
	if( Object.prototype.toString.call( mvAliases ) !== '[object Array]' )
	{
		throw new Error( "Not ALIAS array!" );
	}
	if( ! (mvAliases.length > 0) )
	{
		throw new Error( "Empty ALIAS array!" );
	}

	if( g_vLibImportDeep > 99 )
	{
		throw new Error( "Too large import deep!" );
	}

	var i = 0, len = mvAliases.length;

	for( ; i < len; ++i )
	{
		var masAlias = mvAliases[ i ];
		if( masAlias === "" )
		{
			throw new Error( "Empty ALIAS value!" );
		}

		var mbExist = g_cIndexProcessedLibsAlias[ masAlias ];
		if( mbExist === true )
		{
			continue;
		}

		var mcVal = g_vLibsAliases[ masAlias ];

		if( typeof mcVal === 'string' )
		{
			g_cIndexProcessedLibsAlias[ masAlias ] = true;

			g_vLibImportStructure.push( masAlias );
			g_vLibImportStructure.push( mcVal );
		}
//	else if( mcVal instanceof Array )
		else if( Object.prototype.toString.call( mcVal ) === '[object Array]' )
		{
			var masFileName = mcVal.pop();
			g_cIndexProcessedLibsAlias[ masAlias ] = true;

			++g_vLibImportDeep;
			deploy_complex_alias( mcVal );

			g_vLibImportStructure.push( masAlias );
			g_vLibImportStructure.push( masFileName );
		}
		else
		{
			throw new Error( "Unknown ALIAS type!\n\tALIAS: '" + mcVal + "'" );
		}

/*
throw {
    name:        "System Error",
    level:       "Show Stopper",
    message:     "Error detected. Please contact the system administrator.",
    htmlMessage: "Error detected. Please contact the <a href=\"mailto:sysadmin@fake_domen.com\">system administrator</a>.",
    toString:    function(){return this.name + ": " + this.message;}
};
*/

	}
}


//=============================================================
function fn_import_inner( masLibs )
{
	g_vLibImportDeep = 0;
	g_vLibImportStructure = [];

	if( typeof masLibs === 'string' )
	{
		if( masLibs.length === 0 )
		{
			throw new Error( "Incorrect param: empty string!" );
		}
		deploy_complex_alias( masLibs.split( " " ) );
	}
	else if( typeof masLibs === 'undefined' )
	{
		// Отработает импорт по умолчанию
	}
	else
	{
		var err = new Error();
		throw new Error( "Unknown type param!\n\n" + err.stack );
	}
	masLibs = null;

	var masSources = "";
	if( g_bFisrtCallImport )
	{
		g_bFisrtCallImport = false;

		masSources += getMainSource()
		masSources += getR_incSource();

// при первом вызове fn_import ВСЕГДА принудительно подключаем
		g_vLibImportStructure.unshift( "lib/func_alias.js" );
		g_vLibImportStructure.unshift( "alias" ); // нулевой индекс будет
	}

	var masErrors = "", masErrAliases = "";
	var miErrCounter = 0, i = 0, len = g_vLibImportStructure.length;
	for( ; i < len; )
	{
		var masAlias = g_vLibImportStructure[ i++ ];
		var masFile = g_vLibImportStructure[ i++ ];

		var masOneFileSource;
		try
		{
			masOneFileSource = g_inc( masFile );
		}
		catch( cEx )
		{
			++miErrCounter;
			masOneFileSource = "";

			masErrAliases += masAlias + ' ';
			masErrors += '\n/*\n\t===============================\nError load "LIB-ALIAS"!\nAlias: "';
			masErrors += masAlias + '"\nFILE: "';
			masErrors += masFile + '"\n{{\nname: "';
			masErrors += cEx.name;

			masErrors += '"\nmessage: "';
			masErrors += cEx.message;

			masErrors += '"\nnumber: "';
			masErrors += cEx.number;

			masErrors += '"\ndescription: "';
			masErrors += cEx.description;

			masErrors += '"\n\nSTACK:\n';
			masErrors += cEx.stack;

			masErrors += '\n}}\n\t===============================\n*/\n';
/*
			masErrors += cEx.
			masErrors += cEx.
*/
		}

		masSources += masOneFileSource + '\n;;;\t//@@@ ### @@@\n';
	}
	// Освобождаем память из-под массива
	g_vLibImportStructure = null;


	if( miErrCounter !== 0 )
	{
		masSources += '\n\necho( "Import errors: ';
		masSources += miErrCounter;
		masSources += '\\nALIASES:\\n\\"';
		masSources += masErrAliases + '\\"';
		masSources += '" );\n';
		masSources += masErrors;
	}

	return masSources;
}


function fn_import( masLibs )
{
	return fn_import_inner( masLibs );
/*
	try
	{
	}
	catch( mcEx )
	{
//		Echo( mcEx );
		throw new Error( "Catch exception!..\n\n" + mcEx.stack );
	}
*/
}

]]></script>
</component>
</package>
